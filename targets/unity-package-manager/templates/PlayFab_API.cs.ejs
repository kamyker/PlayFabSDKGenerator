#if <%- getApiDefineFlag(api) %>

using System;
using System.Collections.Generic;
using PlayFab.<%- api.name %>Models;
using PlayFab.Internal;
using System.Threading.Tasks;

namespace PlayFab
{
<%- generateApiSummary("    ", api, "description")
%>    public static <%- isPartial %>class <%- api.name %>API
    {
        static <%- api.name %>API() {}
<% if (hasClientOptions) { %>
        /// <summary>
        /// Verify client login.
        /// </summary>
        public static bool IsClientLoggedIn()
        {
            return PlayFabSettings.staticPlayer.IsClientLoggedIn();
        }
<% } %>
<% if (hasEntityTokenOptions) { %>
        /// <summary>
        /// Verify entity login.
        /// </summary>
        public static bool IsEntityLoggedIn()
        {
            return PlayFabSettings.staticPlayer.IsEntityLoggedIn();
        }
<% } %>
        /// <summary>
        /// Clear the Client SessionToken which allows this Client to call API calls requiring login.
        /// A new/fresh login will be required after calling this.
        /// </summary>
        public static void ForgetAllCredentials()
        {
            PlayFabSettings.staticPlayer.ForgetAllCredentials();
        }

        private static PlayFabAuthenticationContext GetContext(PlayFabAuthenticationContext context) => context ?? PlayFabSettings.staticPlayer;

<% for(var i in api.calls)
{ 
    var apiCall = api.calls[i]; 
    var datatype = api.datatypes[apiCall.request]; -%>
<%- generateApiSummary("        ", apiCall, "summary") -%>
<%- getDeprecationAttribute("        ", apiCall) -%>
<%- getParametersPropertyMethodDescription("        ", datatype) -%>
        public static Task<<%- apiCall.result %>> <%- apiCall.name %>(<%- getParametersPropertyDef(datatype) %>
            PlayFabAuthenticationContext customAuthContext = null, object customData = null, Dictionary<string, string> extraHeaders = null)
        {
            <%- apiCall.request %> request = new <%- apiCall.request %>()
            {
<% for(var p of datatype.properties)
   { -%>
                <%- p.name %> = <%- p.name %>,
<% } -%>
            };

            var context = GetContext(customAuthContext);
<%- getRequestActions("            ", apiCall) -%>
<%- getCustomApiLogic("            ", apiCall) %>
            return PlayFabHttp.MakeApiCallAsync<<%- apiCall.result %>>("<%- apiCall.url %>", request,
				<%- getAuthParams(apiCall) %>,
				customData, extraHeaders, context);
        }<%- getCustomApiFunction("        ", api, apiCall) %>

<% } %>
    }
}

#endif
